Uflage
######

Python port of `Camo`_.

.. _Camo: https://github.com/atmos/camo/


Base concept
============

The base concept is the same of the original project: offer some way
to proxy access to resources via HTTPS, while hiding original user
information.

The main difference is we also want to allow manipulations to be done
on the proxied resources; for example, we can create thumbnails of
images.

To accomplish that, we use a JSON payload in the URL, along with a
HMAC signature that allows verification and preventing abuse.

The proxy itself offers no caching facilities, as those should be
handled by a reverse proxy (nginx, varnish) to be put in front of the
proxy itself.


URL generation
==============

URLs contain the base64 representation of a json object containing
information about the proxied object and requested operations, along
with HMAC signature.

The base structure of the URL is::

    https://hostname/<payload>[.<ext>]?s=<signature>

**Payload** is a base64-encoded json object describing the resource to
be proxied.

**Ext** is an optional file name extension, which can also be used to
verify the mimetype of the proxied resource.

**Signature** is the HMAC signature (hex-encoded) to be used to verify
the payload.


.. code-block:: python

    import base64
    import hashlib
    import hmac
    import json

    image_url = 'https://f.cloud.github.com/assets/38/2496172/f558bbb4-b312-11e3-88e9-646b77e47e6e.gif'
    proxy_url = 'https://uflage.example.com'
    shared_key = 'This is a secure key'

    payload = base64.urlsafe_b64encode(json.dumps({'url': image_url}))
    signature = hmac.HMAC(
        key=shared_key, msg=payload, digestmod=hashlib.sha1
        ).hexdigest()

    url = '{0}/{1}?s={2}'.format(proxy_url, payload, signature)

The resulting url in this case will be::

    https://uflage.example.com/eyJ1cmwiOiAiaHR0cHM6Ly9mLmNsb3VkLmdpdGh1Yi5jb20vYXNzZXRzLzM4LzI0OTYxNzIvZjU1OGJiYjQtYjMxMi0xMWUzLTg4ZTktNjQ2Yjc3ZTQ3ZTZlLmdpZiJ9?s=abbe68e0cfb1ce334295aaeb36031a1143cd093f

Quite long, but still shorter than the ones generated by camo :) (172
characters vs 212, in this case).
